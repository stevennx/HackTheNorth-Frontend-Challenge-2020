{"version":3,"sources":["static/not_hack_the_north.png","components/CardContainer/index.tsx","components/LoginForm/component.tsx","components/LoginForm/index.ts","redux/modules/Login/actions.ts","redux/modules/Login/types.ts","components/LoginCard/index.tsx","components/Background/index.tsx","App.tsx","serviceWorker.ts","redux/reducers/index.ts","redux/modules/Login/reducers.ts","redux/modules/ErrorAlert/sagas.ts","redux/modules/ErrorAlert/types.ts","redux/modules/ErrorAlert/actions.ts","redux/modules/Login/sagas.ts","redux/sagas/index.ts","redux/store/index.ts","index.tsx"],"names":["module","exports","Container","styled","div","CardContainer","children","FormContainer","form","Label","label","Input","input","Button","button","Form","errorMessage","loginAction","useState","email","setEmail","password","setPassword","onSubmit","event","preventDefault","htmlFor","name","type","placeholder","value","onChange","element","target","connect","state","credentials","validateCredentials","payload","LoginFormComponent","LoginCardContainer","Image","img","Title","span","LoginCard","src","Logo","alt","LoginForm","BackgroundContainer","Background","App","Boolean","window","location","hostname","match","combineReducers","loginUser","action","loggedIn","fireErrorAlert","watchFireErrorAlert","call","Swal","fire","icon","title","text","takeEvery","loginErrorAlert","watchLoginErrorAlert","put","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c4c3dbe1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not_hack_the_north.e2d8cdc9.png\";","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface Props {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    children?: any;\n}\nconst Container = styled.div`\n    width: 400px;\n    height: 550px;\n    background: #4d3585;\n    padding: 40px 20px;\n`\n\n\nconst CardContainer: React.FC<Props> = ({children}) => (\n    <Container>\n        {children}\n    </Container>\n)\n\nexport default CardContainer; ","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Props } from \"./index\";\n\nconst FormContainer = styled.form`\n  display: flex;\n  flex-flow: column wrap;\n  align-items: center;\n\n  width: 60%;\n\n  label,\n  input {\n    display: block;\n    width: 100%;\n  }\n`;\n\nconst Label = styled.label`\n  line-height: 22px;\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 5px;\n\n  color: white;\n`;\n\nconst Input = styled.input`\n  margin-bottom: 10px;\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #777;\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  margin-top: 15px;\n  padding: 10px 15px;\n  background-color: rgb(70, 153, 179);\n  color: white;\n  border-radius: 5px;\n  border: 1px solid rgb(70, 153, 179);\n  background-color: 250ms;\n\n  :hover {\n    cursor: pointer;\n    background-color: black;\n    color: rgb(70, 153, 179);\n  }\n`;\n\nconst Form: React.FC<Props> = ({ errorMessage, loginAction }) => {\n  const [email, setEmail] = useState<string>(\"\");\n  const [password, setPassword] = useState<string>(\"\");\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    const element = event.target as HTMLInputElement;\n    setEmail(element.value);\n  };\n\n  const handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    const element = event.target as HTMLInputElement;\n    setPassword(element.value);\n  };\n\n  const handleLogin = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    loginAction({ email: email, password: password });\n  };\n\n  return (\n    <FormContainer onSubmit={handleLogin}>\n      <Label htmlFor=\"email\">Email</Label>\n      <Input\n        name=\"email\"\n        type=\"text\"\n        placeholder=\"Enter your email\"\n        value={email}\n        onChange={handleEmailChange}\n      />\n\n      <Label htmlFor=\"email\">Password</Label>\n      <Input\n        name=\"password\"\n        type=\"password\"\n        placeholder=\"Enter your password\"\n        value={password}\n        onChange={handlePasswordChange}\n      />\n      <Button type=\"submit\">Login</Button>\n    </FormContainer>\n  );\n};\n\nexport default Form;\n","import { connect } from \"react-redux\";\nimport LoginFormComponent from \"./component\";\nimport loginAction from \"../../redux/modules/Login/actions\";\n\nconst mapStateToProps = (state: any) => ({\n  errorMessage: state.errorMessage,\n});\n\ninterface StateProps {\n    errorMessage: string\n}\n\ninterface DispatchProps {\n    loginAction: typeof loginAction;\n}\n\nexport type Props = StateProps & DispatchProps;\n\nexport default connect(mapStateToProps, { loginAction })(LoginFormComponent);\n","import {\n  Credentials,\n  LoginActionType,\n  LOGIN_USER_SUCCESS,\n  LOGIN_USER_ERROR\n} from \"./types\";\n\nconst validateCredentials = ({ email, password }: Credentials) =>\n  email === \"a\" && password === \"b\";\n\nexport default (credentials: Credentials): LoginActionType =>\n  validateCredentials(credentials)\n    ? {\n        type: LOGIN_USER_SUCCESS,\n        payload: {\n          errorMessage: null\n        }\n      }\n    : {\n        type: LOGIN_USER_ERROR,\n        payload: {\n          errorMessage: \"Invalid credentials\"\n        }\n      };\n","export const LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\nexport const LOGIN_USER_ERROR = \"LOGIN_USER_ERROR\";\n\nexport interface Credentials {\n  email: string;\n  password: string;\n}\n\nexport interface Request {\n    errorMessage: string | null\n}\n\nexport type LoginActionType = {\n  type: typeof LOGIN_USER_SUCCESS | typeof LOGIN_USER_ERROR;\n  payload: Request;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Logo from \"../../static/not_hack_the_north.png\"\nimport LoginForm from \"../LoginForm\";\n\nconst LoginCardContainer = styled.div`\n    display: flex;\n    flex-flow: column wrap;\n    align-items: center;\n`\n\nconst Image = styled.img`\n    border-radius: 50%;\n    width: 150px;\n    height: 150px;\n`\n\nconst Title = styled.span`\n    font-size: 48px;\n    font-weight: 600;\n    margin: 20px 0;\n\n    color: white;\n`\n\nconst LoginCard = () => (\n    <LoginCardContainer>\n        <Image src={Logo} alt=\"\"/>\n        <Title>Login</Title>\n        <LoginForm/>\n        <div></div>\n    </LoginCardContainer>\n);\n\nexport default LoginCard;","import React from \"react\";\nimport styled from \"styled-components\";\nimport CardContainer from \"../CardContainer\";\nimport LoginCard from \"../LoginCard\";\n\nconst BackgroundContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #070a1c;\n  width: 100vw;\n  height: 100vh;\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nconst Background = () => (\n  <BackgroundContainer>\n    <CardContainer>\n      <LoginCard/>\n    </CardContainer>\n  </BackgroundContainer>\n);\n\nexport default Background;\n","import React from 'react';\nimport Background from './components/Background'\n\nconst App = () => (\n  <Background/>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport loginUser from '../modules/Login/reducers'\n\nexport default combineReducers({ loginUser });\n","import { LOGIN_USER_SUCCESS, LOGIN_USER_ERROR } from \"./types\";\nimport { LoginActionType } from \"./types\";\n\nexport default (state = {}, action: LoginActionType) => {\n  switch (action.type) {\n    case LOGIN_USER_SUCCESS:\n      return {\n        ...state,\n        ...action.payload,\n        loggedIn: true\n      };\n    case LOGIN_USER_ERROR:\n      return {\n        ...state,\n        ...action.payload,\n        loggedIn: false\n      };\n    default:\n      return state;\n  }\n};\n","import { call, takeEvery } from \"redux-saga/effects\";\nimport { FIRE_ERROR_ALERT, ErrorAlertActionType} from \"./types\";\nimport Swal from \"sweetalert2\";\n\nexport function* fireErrorAlert(action: ErrorAlertActionType) {\n  yield call(() =>\n    Swal.fire({\n      icon: \"error\",\n      title: action.payload.errorMessage,\n      text: \"Something went wrong!\"\n    })\n  );\n}\n\nexport function* watchFireErrorAlert() {\n  yield takeEvery(FIRE_ERROR_ALERT, fireErrorAlert);\n}\n","export const FIRE_ERROR_ALERT = \"FIRE_ERROR_ALERT\";\n\nexport interface Request {\n    errorMessage: string \n}\n\nexport type ErrorAlertActionType = {\n  type: typeof FIRE_ERROR_ALERT\n  payload: Request;\n};","import {\n    FIRE_ERROR_ALERT,\n    ErrorAlertActionType\n  } from \"./types\";\n\nexport default (errorMessage: string) : ErrorAlertActionType => ({\n    type: FIRE_ERROR_ALERT,\n    payload: {\n        errorMessage\n    }\n})","import { put, takeEvery } from \"redux-saga/effects\";\nimport { LOGIN_USER_ERROR, LoginActionType} from \"./types\";\nimport errorAlertAction from '../ErrorAlert/actions'\n\nexport function* loginErrorAlert(action: LoginActionType) {\n  yield put(errorAlertAction(action.payload.errorMessage || ''))\n}\n\nexport function* watchLoginErrorAlert() {\n  yield takeEvery(LOGIN_USER_ERROR, loginErrorAlert);\n}\n","import { all } from 'redux-saga/effects';\nimport { watchFireErrorAlert } from  '../modules/ErrorAlert/sagas'\nimport { watchLoginErrorAlert } from '../modules/Login/sagas'\n  \nexport default function* rootSaga() {\n  yield all([\n    watchLoginErrorAlert(),\n    watchFireErrorAlert()\n  ]);\n}","import { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootSaga from '../sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n    \nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(sagaMiddleware)\n  )\n);\n\nsagaMiddleware.run(rootSaga)\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}